name: Build
on: [ push, pull_request ]

env:
  BUILD_TYPE: Release

jobs:
  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    container: ubuntu:rolling
    env:
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Clang",
            artifact: "linux-clang.tar.xz",
            cc: "clang", cxx: "clang++",
            cmake_configure_options: '-DCMAKE_EXE_LINKER_FLAGS="-v -fuse-ld=lld"',
          }
          - {
            name: "Ubuntu GCC",
            artifact: "linux-gcc.tar.xz",
            cc: "/usr/bin/gcc", cxx: "/usr/bin/g++",
          }

    steps:

      - name: Update environment
        shell: bash
        run: |
          # Update package lists
          apt update -qq
          # Install build tools
          apt install -y \
            sudo \
            jq \
            make \
            clang \
            cmake \
            curl \
            wget \
            git \
            build-essential \
            gnupg2 \
            libglm-dev

      - name: Install GLSLC
        shell: bash
        env:
          GLSLC_CLANG_GAPI: https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/373/20211122-073732/install.tgz
        run: |
          mkdir tmp
          wget -O tmp/shaderc_clang.tgz $GLSLC_CLANG_GAPI
          tar -xvf tmp/shaderc_clang.tgz install/bin/glslc
          cp install/bin/glslc /usr/bin
          rm -r install
          rm -r tmp

      - name: Install Vulkan SDK
        shell: bash
        run: sudo apt-get install -y libvulkan-dev

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        shell: bash
        run: |
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          mkdir build
          cmake -Bbuild -H. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build build/ --target all 

      - name: Prepare upload
        run: |
          tar cfz ${{ matrix.config.artifact }} build/

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          path: ${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

#  windows:
#    name: ${{ matrix.config.name }}
#    runs-on: windows-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        config:
#          - {
#            name: "Windows MSVC",
#            artifact: "windows-msvc.zip",
#            cc: "cl", cxx: "cl",
#            cmake_build_options: "--config Release",
#            cmake_configure_options: '-G "Visual Studio 16 2019" -A x64',
#            conan_profile_update: 'conan profile update settings.compiler="Visual Studio" default; conan profile update settings.compiler.version=16 default',
#          }
#
#    steps:
#      - name: Update environment
#        shell: pwsh
#        run: |
#          pip3 install wheel setuptools
#          pip3 install conan
#          choco install ninja
#
#      - name: Install Vulkan SDK
#        shell: pwsh
#        run: |
#          curl -LS -o vulkansdk.exe `
#            https://sdk.lunarg.com/sdk/download/${{ env.inexor_vulkan_version }}/windows/VulkanSDK-${{ env.inexor_vulkan_version }}-Installer.exe?Human=true
#
#          7z x vulkansdk.exe -o"${{ env.inexor_vulkan_sdk }}"
#
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Configure CMake
#        shell: pwsh
#        run: |
#          $env:CC="${{ matrix.config.cc }}"
#          $env:CXX="${{ matrix.config.cxx }}"
#          $env:Path += ";${{ env.inexor_vulkan_sdk }}\;${{ env.inexor_vulkan_sdk }}\Bin\"
#
#          # Setup conan
#          conan profile new default --detect --force
#          ${{ matrix.config.conan_profile_update }}
#
#          # Configure CMake
#          cmake . `
#            -Bbuild `
#            -DCMAKE_BUILD_TYPE=${{ env.inexor_build_type }} `
#            ${{ matrix.config.cmake_configure_options }}
#
#      - name: Build
#        shell: pwsh
#        run: |
#          cmake --build build ${{ matrix.config.cmake_build_options }}
#
#      - name: Prepare upload
#        shell: pwsh
#        run: |
#          7z a -tzip ${{ matrix.config.artifact }} build/*
#
#      - name: Upload
#        uses: actions/upload-artifact@v2
#        with:
#          path: ${{ matrix.config.artifact }}
#          name: ${{ matrix.config.artifact }}